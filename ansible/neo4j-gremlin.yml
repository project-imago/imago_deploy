- hosts: back
  vars:
    - neo4j_password: IFDSHY738YSDKQHJ
    - gremlin_server_path: /home/gremlin-server
  tasks:
    # - cmd: wget -O - https://debian.neo4j.org/neotechnology.gpg.key | sudo apt-key add -
    # - cmd: sudo apt-get update
    # - cmd: sudo apt-get install neo4j
    - apt_key:
        
        url: https://debian.neo4j.org/neotechnology.gpg.key
        state: present # not required. choices: absent;present. Ensures that the key is present (added) or absent (revoked).
      
    - cmd: echo 'deb https://debian.neo4j.org/repo stable/' | sudo tee /etc/apt/sources.list.d/neo4j.list
    - apt:
        update_cache: yes # not required. Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.
        # deb: undefined # not required. Path to a .deb package on the remote machine.,If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)
        name: neo4j # not required. A list of package names, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.
        state: present # not required. choices: absent;build-dep;latest;

    - cmd: neo4j-admin set-initial-password {{ neo4j_password }}
      name: set-initial-password
    - service:
        name: neo4j # required. Name of the service.
        state: reloaded
        # + gremlin server
        # https://github.com/MrSaints/docker-gremlin-neo4j ?

    - unarchive:
        dest: {{ gremlin_server_path }} 
        src: http://mirror.ibcp.fr/pub/apache/tinkerpop/3.4.3/apache-tinkerpop-gremlin-server-3.4.3-bin.zip
        remote_src: yes
        
    - name: "enable Bolt 1/2: https://stackoverflow.com/a/56977264"
      template:
          dest: "{{ gremlin_server_path }}/conf/gremlin-server-neo4j.yaml"
          src: gremlin-server-neo4j.yaml.j2
    - name: "enable Bolt 2/2: https://stackoverflow.com/a/56977264"
      template:
          dest: "{{ gremlin_server_path }}/conf/neo4j-bolt.properties"
          src: neo4j-bolt.properties.j2
    - name: install bolt
      command: "./bin/gremlin-server.sh install com.steelbridgelabs.oss neo4j-gremlin-bolt 0.3.1"
      args:
        chdir: "{{ gremlin_server_path }}"
    - name: run the gremlin thingy
      command: ./bin/gremlin-server.sh start
      environment:
        - GREMLIN_YAML: conf/gremlin-server-neo4j.yaml
      args:
        chdir: "{{ gremlin_server_path }}"

# comment tester :
# 1/ neo4j lance son serveur HTTP sur localhost:7474, s'y connecter
# 2/ lancer :play movie-graph, à la page 2, cliquer sur la query pour créer le graph des films
# 3/ se connecter à la console de Imago
# 4/
# alias Gremlex.Client
# alias Gremlex.Graph
# {:ok, vertices} = Graph.g() |> Graph.v() |> Client.query
# length(vertices) # doit être égal à 171