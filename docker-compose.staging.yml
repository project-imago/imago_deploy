version: '3'

volumes:
  synapse_data:
  synapse_media_store:

  wdqs_data:

services:
  imago:
    # ports:
    #   - "4000:4000"
    volumes:
      - ./repos/imago:/opt/app:rw
    environment:
      - MIX_ENV=prod
      - DATABASE_URL=ecto://imago:postgres@postgres_imago/imago_prod
      - WDQS_URL=http://wdqs:9999/bigdata/namespace/wdq/sparql/wdq/sparql
      - SECRET_KEY_BASE=g61ec56ghZSkvqAT+93jbL+EITkTbuanV54LMhu2K5ubdELFCd9QX8fXa981CTJx
      - ENDPOINT_URL=alpha.imago.pm
    labels:
      - traefik.enable=true
        # - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
      - traefik.http.routers.api.entryPoints=http
      - traefik.http.routers.api.rule=Host(`alpha.imago.pm`) && PathPrefix(`/api`)
      - traefik.http.routers.api.middlewares=https_redirect
        # - traefik.http.routers.api.middlewares=api-strip
      - traefik.http.routers.apis.entryPoints=https
      - traefik.http.routers.apis.rule=Host(`alpha.imago.pm`) && PathPrefix(`/api`)
      - traefik.http.routers.apis.tls.certresolver=myresolver
        # - traefik.http.routers.apis.middlewares=api-strip
      # - traefik.docker.network=traefik_default

  imago_front:
    build:
      context: ./repos/imago_front
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - MATRIX_URL=https://matrix.alpha.imago.pm
        - API_URL=https://alpha.imago.pm/api
    expose:
      - 80
    # command: "npm run server-tls"
    # ports:
    #   - "9000:9000"
    labels:
      - traefik.enable=true
      - traefik.http.services.front.loadbalancer.server.port=80
      - traefik.http.routers.front.entryPoints=http
      - traefik.http.routers.front.rule=Host(`alpha.imago.pm`) && PathPrefix(`/`)
      - traefik.http.routers.front.middlewares=https_redirect
      - traefik.http.routers.fronts.entryPoints=https
      - traefik.http.routers.fronts.rule=Host(`alpha.imago.pm`) && PathPrefix(`/`)
      - traefik.http.routers.fronts.tls.certresolver=myresolver
      # - traefik.docker.network=traefik_default

  synapse:
    # command:  migrate_config
    # command:  generate
    environment:
      - SYNAPSE_SERVER_NAME=alpha.imago.pm
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_ENABLE_REGISTRATION=yes
      - SYNAPSE_LOG_LEVEL=INFO
      # - SYNAPSE_LOG_LEVEL=INFO
      # - SYNAPSE_LOG_LEVEL=DEBUG
      # - POSTGRES_HOST=postgres_synapse
      # - POSTGRES_USER=synapse
      # - POSTGRES_PASSWORD=postgres
    volumes:
      # You may either store all the files in a local folder
      # - ./synapse-files:/data
      - synapse_data:/data
      - synapse_media_store:/data/media_store
      - ./synapse-homeserver.yaml:/data/homeserver.yaml
      - ./synapse-imago.staging.yaml:/data/appservices/imago.yaml
      - ./synapse-log.config:/data/log.config
      # - ./synapse-signing.key:/data/matrix.imago.local.signing.key
      # - ./synapse-log.config:/data/matrix.imago.local.log.config
      # - ./repos/imago/imago.yaml:/data/appservices/imago.yaml
      # .. or you may split this between different storage points
      # - ./files:/data
      # - /path/to/ssd:/data/uploads
      # - /path/to/large_hdd:/data/media
    # depends_on:
    #   - postgres_synapse
    # In order to expose Synapse, remove one of the following, you might for
    # instance expose the TLS port directly:
    # ports:
    #   - 8008:8008/tcp
    #   - 8448:8448/tcp
    # ... or use a reverse proxy, here is an example for traefik:
    labels:
      - traefik.http.routers.synapse.entryPoints=matrix
      - traefik.http.routers.synapse.rule=Host(`matrix.alpha.imago.pm`)
      # - traefik.docker.network=traefik_default
    #   - traefik.enable=true
    #   - traefik.frontend.rule=Host:my.matrix.Host
    #   - traefik.port=8008
      - traefik.enable=true
      - traefik.http.routers.http-synapse.entryPoints=http
      - traefik.http.routers.http-synapse.rule=Host(`matrix.alpha.imago.pm`)
      - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
      - traefik.http.routers.http-synapse.middlewares=https_redirect
      - traefik.http.routers.https-synapse.entryPoints=https
      - traefik.http.routers.https-synapse.rule=Host(`matrix.alpha.imago.pm`)
      - traefik.http.routers.https-synapse.service=synapse
      - traefik.http.routers.https-synapse.tls=true
      - traefik.http.services.synapse.loadbalancer.server.port=8008
      - traefik.http.routers.https-synapse.tls.certResolver=myresolver

  postgres_imago:
    environment:
      - POSTGRES_USER=imago
    # Change that password, of course!
      - POSTGRES_PASSWORD=postgres
    volumes:
      # You may store the database tables in a local folder..
      - ./data/imago:/var/lib/postgresql/data
      # .. or store them on some high performance storage for better results
      # - /path/to/ssd/storage:/var/lib/postgresql/data

  wdqs:
    volumes:
      - wdqs_data:/wdqs/data
    environment:
      - WIKIBASE_HOST=www.wikidata.org
      - WDQS_HOST=wdqs
      - WDQS_PORT=9999

  traefik:
    image: traefik:v2.2
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.matrix.address=:8448"
      - "--certificatesresolvers.myresolver.acme.email=pierre@pdelacroix.com"
      - "--certificatesresolvers.myresolver.acme.storage=acme.json"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
    ports:
      - "80:80"
      - "443:443"
      - "8448:8448"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  delegation:
    image: nginx:1.19
    volumes:
      - ./delegation-staging:/usr/share/nginx/html:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.delegation.entryPoints=http
      - traefik.http.routers.delegation.rule=Host(`alpha.imago.pm`) && PathPrefix(`/.well-known/matrix`)
      - traefik.http.routers.delegation.middlewares=https_redirect
      - traefik.http.routers.delegation.middlewares=delegation-strip
      - traefik.http.routers.delegations.entryPoints=https
      - traefik.http.routers.delegations.rule=Host(`alpha.imago.pm`) && PathPrefix(`/.well-known/matrix`)
      - traefik.http.middlewares.delegation-strip.stripprefix.prefixes=/.well-known/matrix
      - traefik.http.routers.delegations.middlewares=delegation-strip
      - traefik.http.routers.delegations.tls.certresolver=myresolver
