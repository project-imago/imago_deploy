# TODO: split 
# web:
#   extends:
#     file: common-services.yml
#     service: webapp

#     # https://docs.docker.com/compose/extends/#understand-the-extends-configuration

# Matrix
  # Synapse
  #postgres
  # This compose file is compatible with Compose itself, it might need some
# adjustments to run properly with stack.

version: '3'

services:

  synapse:
    image: docker.io/matrixdotorg/synapse:latest
    # command:  migrate_config
    # command:  generate
    domainname: matrix.imago.local
    # Since synapse does not retry to connect to the database, restart upon
    # failure
    restart: unless-stopped
    # Need to do it via YAML
    environment:
      - SYNAPSE_SERVER_NAME=matrix.imago.local
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_ENABLE_REGISTRATION=no
      # - SYNAPSE_ENABLE_REGISTRATION=yes
      # - SYNAPSE_LOG_LEVEL=INFO
      - SYNAPSE_LOG_LEVEL=DEBUG
      - POSTGRES_PASSWORD=changeme
    volumes:
      # You may either store all the files in a local folder
      - ./synapse-files:/data
      # .. or you may split this between different storage points
      # - ./files:/data
      # - /path/to/ssd:/data/uploads
      # - /path/to/large_hdd:/data/media
    depends_on:
      - db
    # In order to expose Synapse, remove one of the following, you might for
    # instance expose the TLS port directly:
    ports:
      - 8448:8448/tcp
    # ... or use a reverse proxy, here is an example for traefik:
    # labels:
    #   - traefik.enable=true
    #   - traefik.frontend.rule=Host:my.matrix.Host
    #   - traefik.port=8008
    networks:
      imago:
        aliases:
          - matrix.imago.local

  db:
    # image: docker.io/postgres:10-alpine
    image: postgres:12.0-alpine
    domainname: db

    environment:
      - POSTGRES_USER=synapse
    # Change that password, of course!
      - POSTGRES_PASSWORD=changeme
    volumes:
      # You may store the database tables in a local folder..
      - ./schemas:/var/lib/postgresql/data
      # .. or store them on some high performance storage for better results
      # - /path/to/ssd/storage:/var/lib/postgresql/data
    networks:
      imago:
        aliases:
          - db.imago.local
          - db

  imago_db:
    # image: docker.io/postgres:10-alpine
    image: postgres:12.0-alpine
    domainname: imago_db

    environment:
      - POSTGRES_USER=postgres
    # Change that password, of course!
      - POSTGRES_PASSWORD=changeme
    volumes:
      # You may store the database tables in a local folder..
      - ./data/imago:/var/lib/postgresql/data
      # .. or store them on some high performance storage for better results
      # - /path/to/ssd/storage:/var/lib/postgresql/data
    networks:
      imago:
        aliases:
          - imago_db.imago.local
          - imago_db


# phoenix

  app:
    image: nicbet/phoenix:1.4.10
    build: ./repos/imago
    command: mix ecto.setup && mix phx.server
    ports:
      - "4001:4000"
    volumes:
      - ./repos/imago/:/app
    depends_on:
      - db
      - synapse
      - gremlin-server
    environment:
      # How many databases is it again? Should probably create 2 users, one for synapse one for elixir
      - POSTGRES_USER=synapse
      - POSTGRES_PASSWORD=changeme
      
    networks:
      imago:
        aliases:
          - imago.local
      

# neo4j-gremlin

  gremlin-server:
    image: gremlinorm/gremlin-server-neo4j
    # container_name: gremlin-server
    ports:
      - "8182:8182"
    volumes:
      - ./data/:/data/
      - ./gremlin-server-neo4j/conf/gremlin-server-custom.yml:/gremlin-server/conf/gremlin-server-custom.yml
      - ./gremlin-server-neo4j/conf/neo4j.properties:/gremlin-server/conf/neo4j.properties
      - ./gremlin-server-neo4j/scripts/neo4j.groovy:/gremlin-server/scripts/neo4j.groovy
    networks:
      imago:
        aliases:
          - gremlin.imago.local

  neo4j-server:
    image: neo4j:2.3
    environment:
      # - NEO4J_AUTH=neo4j/pass
      - NEO4J_AUTH=none
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    depends_on: 
      - gremlin-server
    volumes:
      # - ./data/copy:/data/
      - ./data/:/data/
    networks:
      imago:
        aliases:
          - neo4j.imago.local


# Is it useful?
  # gremlin-console:
  #   image: gremlinorm/gremlin-console-neo4j
  #   volumes:
  #     - ./data/:/data/
  #     - ./gremlin-console-neo4j/conf/remote-docker-compose.yml:/gremlin-console/conf/remote-docker-compose.yml

  # gremlin-console-with-server:
  #   extends:
  #     service: gremlin-console
  #   links:
  #     - gremlin-server

# nodejs

  node:
    build: ./repos/imago_front
    environment:
      - NODE_ENV=development
    volumes:
      - ./repos/imago_front:/home/node/app
    expose:
      - "8081"
    command: "npm run server"
    # command: "npm run server-tls"
    networks:
      # imago-front:
      imago:
        aliases:
          - front.imago.local

networks:
  imago:
