# TODO: split 
# web:
#   extends:
#     file: common-services.yml
#     service: webapp

#     # https://docs.docker.com/compose/extends/#understand-the-extends-configuration

# Matrix
  # Synapse
  #postgres
  # This compose file is compatible with Compose itself, it might need some
# adjustments to run properly with stack.

version: '3'

volumes:
  imago_front_deps:
  imago_front_compilation_items:
  imago_deps:
  imago_node_deps:
  imago_build_files:
  # blazegraph_data:
  wdqs_data:

services:

  # imago

  imago:
    # build: ./repos/imago
    image: registry.gitlab.com/imago-project/imago:latest
    hostname: api.imago.local
    ports:
      - "4000:4000"
    volumes:
      # - ./repos/imago/lib:/opt/app/lib
      # - ./repos/imago/assets:/opt/app/assets
      # - ./repos/imago/priv:/opt/app/priv
      - ./repos/imago:/opt/app:rw
      - imago_deps:/opt/app/deps
      - imago_node_deps:/opt/app/assets/node_modules
      - imago_build_files:/opt/app/_build
      # - type: bind
      #   source: ./repos/imago/lib
      #   target: /opt/app/lib
      # - type: bind
      #   source: ./repos/imago/assets
      #   target: /opt/app/assets
      # - type: bind
      #   source: ./repos/imago/priv
      #   target: /opt/app/priv
    depends_on:
      - postgres_imago
      - synapse
      # - gremlin
    environment:
      # How many databases is it again? Should probably create 2 users, one for synapse one for elixir
      - MIX_ENV=dev
      - POSTGRES_HOST=postgres_imago
      - POSTGRES_USER=imago
      - POSTGRES_PASSWORD=postgres
      - GREMLIN_URL=//gremlin:8182/gremlin
      - WAIT_HOSTS=postgres_imago:5432 #,gremlin:8182
      - WAIT_HOSTS_TIMEOUT=60
    networks:
      imago:
        aliases:
          - api.imago.local
      

  # imago_front

  imago_front:
    # build: ./repos/imago_front
    image: registry.gitlab.com/imago-project/imago_front:latest
    hostname: app.imago.local
    environment:
      - NODE_ENV=development
      - MATRIX_URL="matrix.imago.local:8448"
      - API_URL="api.imago.local:4000"
    volumes:
      - ./repos/imago_front:/home/node/app:rw
      - imago_front_deps:/home/node/app/node_modules
      - imago_front_compilation_items:/home/node/app/lib/bs
      - /dev/null:/home/node/app/.merlin
    expose:
      - "9000"
    # command: "npm run server-tls"
    ports:
      - "9000:9000"
    networks:
      # imago-front:
      imago:
        aliases:
          - app.imago.local


  # synapse

  synapse:
    image: docker.io/matrixdotorg/synapse:v1.7.0
    hostname: matrix.imago.local
    # command:  migrate_config
    # command:  generate
    # domainname: matrix.imago
    # Since synapse does not retry to connect to the database, restart upon
    # failure
    restart: unless-stopped
    # Need to do it via YAML
    environment:
      - SYNAPSE_SERVER_NAME=matrix.imago.local
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_ENABLE_REGISTRATION=yes
      - SYNAPSE_LOG_LEVEL=ERROR
      # - SYNAPSE_LOG_LEVEL=INFO
      # - SYNAPSE_LOG_LEVEL=DEBUG
      - POSTGRES_HOST=postgres_synapse
      - POSTGRES_USER=synapse
      - POSTGRES_PASSWORD=postgres
    volumes:
      # You may either store all the files in a local folder
      - ./synapse-files:/data
      # - ./repos/imago/imago.yaml:/data/appservices/imago.yaml
      # .. or you may split this between different storage points
      # - ./files:/data
      # - /path/to/ssd:/data/uploads
      # - /path/to/large_hdd:/data/media
    depends_on:
      - postgres_synapse
    # In order to expose Synapse, remove one of the following, you might for
    # instance expose the TLS port directly:
    ports:
      # - 8008:8008/tcp
      - 8448:8448/tcp
    # ... or use a reverse proxy, here is an example for traefik:
    # labels:
    #   - traefik.enable=true
    #   - traefik.frontend.rule=Host:my.matrix.Host
    #   - traefik.port=8008
    networks:
      imago:
        aliases:
          - matrix.imago.local


  # postgres

  postgres_synapse:
    # image: docker.io/postgres:10-alpine
    image: postgres:12.0-alpine
    domainname: postgres_synapse

    environment:
      - POSTGRES_USER=synapse
    # Change that password, of course!
      - POSTGRES_PASSWORD=postgres
    volumes:
      # You may store the database tables in a local folder..
      - ./data/synapse:/var/lib/postgresql/data
      # .. or store them on some high performance storage for better results
      # - /path/to/ssd/storage:/var/lib/postgresql/data
    networks:
      imago:
        aliases:
          - postgres_synapse.imago.local
          - postgres_synapse

  postgres_imago:
    # image: docker.io/postgres:10-alpine
    image: postgres:12.0-alpine
    domainname: postgres_imago

    environment:
      - POSTGRES_USER=imago
    # Change that password, of course!
      - POSTGRES_PASSWORD=postgres
    volumes:
      # You may store the database tables in a local folder..
      - ./data/imago:/var/lib/postgresql/data
      # .. or store them on some high performance storage for better results
      # - /path/to/ssd/storage:/var/lib/postgresql/data
    networks:
      imago:
        aliases:
          - postgres_imago.imago.local
          - postgres_imago

  # blazegraph:
  #   image: lyrasis/blazegraph:2.1.5
  #   volumes:
  #     - blazegraph_data:/data
  #   networks:
  #     imago:
  #       aliases:
  #         - blazegraph.imago.local
  #         - blazegraph

  wdqs:
    image: wikibase/wdqs:0.3.10
    volumes:
      - wdqs_data:/wdqs/data
    command: /runBlazegraph.sh
    environment:
      - WIKIBASE_HOST=www.wikidata.org
      - WDQS_HOST=wdqs.imago.local
      - WDQS_PORT=9999
    networks:
      imago:
        aliases:
          - wdqs.imago.local
          - wdqs


# neo4j-gremlin

            #  gremlin:
            #    image: gremlinorm/gremlin-server-neo4j
            #    hostname: gremlin.imago.local
            #    # container_name: gremlin-server
            #    depends_on: 
            #      - neo4j
            #    ports:
            #      - "8182:8182"
            #    volumes:
            #      - ./data/:/data/
            #      - ./gremlin-server-neo4j/conf/gremlin-server-custom.yml:/gremlin-server/conf/gremlin-server-custom.yml
            #      - ./gremlin-server-neo4j/conf/neo4j.properties:/gremlin-server/conf/neo4j.properties
            #      - ./gremlin-server-neo4j/scripts/neo4j.groovy:/gremlin-server/scripts/neo4j.groovy
            #    networks:
            #      imago:
            #        aliases:
            #          - gremlin.imago.local
            #
            #  neo4j:
            #    image: neo4j:2.3
            #    hostname: neo4j.imago.local
            #    environment:
            #      # - NEO4J_AUTH=neo4j/pass
            #      - NEO4J_AUTH=none
            #    ports:
            #      - "7474:7474" # HTTP
            #      - "7687:7687" # Bolt
            #    volumes:
            #      # - ./data/copy:/data/
            #      - ./data/:/data/
            #    networks:
            #      imago:
            #        aliases:
            #          - neo4j.imago.local


# Is it useful?
  # gremlin-console:
  #   image: gremlinorm/gremlin-console-neo4j
  #   volumes:
  #     - ./data/:/data/
  #     - ./gremlin-console-neo4j/conf/remote-docker-compose.yml:/gremlin-console/conf/remote-docker-compose.yml

  # gremlin-console-with-server:
  #   extends:
  #     service: gremlin-console
  #   links:
  #     - gremlin-server

networks:
  imago:
    driver: bridge
